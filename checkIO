==============================================================================
 // returns a corrected sentence which starts with capital letter
 // and ends with dot.

// 1)
function correctSentence(text: string): string {
    let dot = text.slice(-1) == "." ? "" : "."
    return text[0].toUpperCase() + text.slice(1) + dot;
}

// 2)
function correctSentence(text: string): string {
    if(!text.endsWith('.')) text += '.';
    return text[0].toUpperCase() + text.slice(1);
}

//3)
function correctSentence(text: string): string {
    return text
        .replace(/^./, x => x.toUpperCase())
        .replace(/\.$/, '')
        + '.';
}

console.log('Example:');
console.log(correctSentence('greetings, friends'));

assert.equal(correctSentence('greetings, friends'), 'Greetings, friends.');
assert.equal(correctSentence('Greetings, friends'), 'Greetings, friends.');
assert.equal(correctSentence('Greetings, friends.'), 'Greetings, friends.');

==============================================================================
==============================================================================
    //  Check if the given number is even or not. 
    //  Your function should return true if the number is even, 
    //  andfalse if the number is odd.
    //  Input: An int.
    //  Output: A bool.
    //  Precondition: both given ints should be between -1000 and 1000

// 1)
function isEven(num: number): boolean {
 
    return num%2 ? false : true;
}

// 2)
function isEven(num: number): boolean {
    return num%2==0;
}

console.log('Example:');
console.log(isEven(2));

// These "asserts" are used for self-checking
assert.equal(isEven(2), true);
assert.equal(isEven(5), false);
assert.equal(isEven(0), true);
==============================================================================
==============================================================================
// In a given text you need to sum the numbers. 
// Only separated numbers should be counted. 
// If a number is part of a word it shouldn't be counted.
// The text consists from numbers, spaces and english letters
// Input: A string.
// Output: An int.

1)
function sumNumbers(test) {
    let arrayTest = test.split(' ').map((i) => 
	{		

		if(isNaN(parseFloat(i)) || i.search(/\d+[a-zA-Z]+/) == 0) {
			return 0
		}else {
			return parseFloat(i)
		}
	}
	)

    return arrayTest.reduce((a, i) => a + i)
}

// 2)
function sumNumbers(text: string): number {
    return text.split(' ').reduce((a, w) => /^[0-9]+$/.test(w) ? a + parseInt(w) : a, 0);
}

// 3)
function sumNumbers(t: string): number {
    return (t.match(/\b\d+\b/g)||[]).reduce((a,c)=>a+ +c,0);
}

// 4)
function sumNumbers(test: string): number {
    const ts = test.split(' ');
    return ts.map(x => Number(x)).filter(x => !isNaN(x)).reduce((x, y) => x + y, 0);
}

// 5)
function sumNumbers(test: string): number {
    const ts = test.split(' ');
    return ts.map(x => Number(x)).filter(x => !isNaN(x)).reduce((x, y) => x + y, 0);
}

// 6)
var sum = (a: number, b: number): number => a + b

var sumNumbers = (t: string): number => t
    .split(' ')
    .map(Number)
    .filter(isFinite)
    .reduce(sum, 0)
    
// 7)
function sumNumbers(test: string): number {
    return test.split(" ")
        .map(x => +x)
        .filter(x => !isNaN(x))
        .reduce((a,b)=> a+b, 0)
}

console.log('Example:');
console.log(sumNumbers('hi'));
==============================================================================
==============================================================================
